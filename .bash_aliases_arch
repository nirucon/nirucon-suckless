# .bash_aliases_arch by Nicklas Rudolfsson
# https://github.com/nirucon

# Check if a command exists before defining an alias or function

# List stuff
alias lss='ls --human-readable --size -1 -S --classify' # list and sort size
alias lst='ls -t -1' # list by mod time
alias count='find . -type f | wc -l' # count files in dir

# Applications
command -v aerc &> /dev/null && alias mail='aerc' # mail client
command -v ranger &> /dev/null && alias fm='ranger' # ranger file manager
command -v ranger &> /dev/null && alias r='ranger' # ranger file manager
command -v nano &> /dev/null && alias nano='nano -l' # line numbers in nano
command -v virsh &> /dev/null && alias virtnet='sudo virsh net-start default' # fix virt-manager net

# virt-manager
alias virtstart='sudo systemctl enable --now libvirtd.service'

# brightnessctl
alias bl100='brightnessctl set 100%'
alias bl75='brightnessctl set 75%'
alias bl50='brightnessctl set 50%'
alias bl25='brightnessctl set 25%'

# Utilities
command -v cal &> /dev/null && alias cal='cal -w -m' # calendar with week numbers
command -v bc &> /dev/null && alias calc="bc" # calculator
alias c='clear' # clear terminal
alias f='find . -name' # find files by name
alias preview='head -n 20' # quick file preview
alias ff='pyfiglet -s -f small $(fastfetch -s os --format json | jq -r '.[0].result.name') && fastfetch -l none' ## fastfetch figlet logo

# Safety measures for file operations
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# Power management
alias shutdown='sudo shutdown -P now'
alias reboot='sudo shutdown -r now'
alias zzz='systemctl suspend'

# Miscellaneous
alias ping='ping -c 5' # ping 5 times

# Navigation shortcuts
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
alias up1='cd ..'
alias up2='cd ../..'
alias up3='cd ../../..'
alias up4='cd ../../../..'
alias up5='cd ../../../../..'

# Package management for pacman
command -v pacman &> /dev/null && alias update='sudo pacman -Syuu'
command -v pacman &> /dev/null && alias install='sudo pacman -S'
command -v pacman &> /dev/null && alias remove='sudo pacman -R'
command -v pacman &> /dev/null && alias pacup='sudo pacman -Syuu'
command -v pacman &> /dev/null && alias paci='sudo pacman -S'
command -v pacman &> /dev/null && alias pacr='sudo pacman -R'

# Snap package management
command -v snap &> /dev/null && alias snup='snap refresh'

# Yay (Yet Another Yaourt) AUR helper
command -v yay &> /dev/null && alias yayupdate='yay -Syu'
command -v yay &> /dev/null && alias yayinstall='yay -S'
command -v yay &> /dev/null && alias yayremove='yay -R'
command -v yay &> /dev/null && alias yaysearch='yay -Ss'
command -v yay &> /dev/null && alias yayinfo='yay -Qi'
command -v yay &> /dev/null && alias yaydepends='yay -Qi | grep Depends'

# Paru AUR helper
command -v paru &> /dev/null && alias paruupdate='paru -Syu'
command -v paru &> /dev/null && alias paruinstall='paru -S'
command -v paru &> /dev/null && alias paruremove='paru -R'
command -v paru &> /dev/null && alias parusearch='paru -Ss'
command -v paru &> /dev/null && alias paruinfo='paru -Qi'
command -v paru &> /dev/null && alias parudepends='paru -Qi | grep Depends'

# Frequent directories
alias cnext='cd ~/Nextcloud'
alias creaper='cd ~/Music/Reaper-projects'
alias cdl='cd ~/Downloads'

# Search within files
alias fgrep='grep -rnw .' # recursive grep with line numbers

# Clipboard management
command -v xclip &> /dev/null && alias copy='xclip -selection clipboard'
command -v xclip &> /dev/null && alias paste='xclip -selection clipboard -o'

# Functions
extract() {
    if [ -f "$1" ]; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"    ;;
            *.tar.gz)    tar xzf "$1"    ;;
            *.bz2)       bunzip2 "$1"    ;;
            *.rar)       unrar x "$1"    ;;
            *.gz)        gunzip "$1"     ;;
            *.tar)       tar xf "$1"     ;;
            *.tbz2)      tar xjf "$1"    ;;
            *.tgz)       tar xzf "$1"    ;;
            *.zip)       unzip "$1"      ;;
            *.Z)         uncompress "$1" ;;
            *.7z)        7z x "$1"       ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

serve() {
    local port="${1:-8000}"
    python -m http.server "$port"
}

# Ensure this file is sourced correctly if called directly
if [ "$0" = "$BASH_SOURCE" ]; then
    echo "This file should be sourced, not executed directly."
    return 1
fi
